
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-apdlmath-examples/solve_dense_matrix.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_01-apdlmath-examples_solve_dense_matrix.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-apdlmath-examples_solve_dense_matrix.py:


Use APDLMath to Solve a Dense Matrix Linear System
--------------------------------------------------
Use the APDLMath module to solve a Dense Matrix Linear System.

.. GENERATED FROM PYTHON SOURCE LINES 7-17

.. code-block:: default


    import time
    import numpy.linalg as np
    from ansys.mapdl.core import launch_mapdl

    # Start MAPDL as a service and create an APDLMath object.
    mapdl = launch_mapdl()
    mm = mapdl.math









.. GENERATED FROM PYTHON SOURCE LINES 18-20

Allocate a Dense Matrix in the APDLMath workspace


.. GENERATED FROM PYTHON SOURCE LINES 20-26

.. code-block:: default

    mapdl.clear()
    dim = 10000
    a = mm.rand(dim, dim)
    b = mm.rand(dim)
    x = mm.zeros(dim)








.. GENERATED FROM PYTHON SOURCE LINES 27-30

Copy the matrices as numpy arrays before they are modified by
factorization call


.. GENERATED FROM PYTHON SOURCE LINES 30-33

.. code-block:: default

    a_py = a.asarray()
    b_py = b.asarray()








.. GENERATED FROM PYTHON SOURCE LINES 34-36

Solve using APDLMath


.. GENERATED FROM PYTHON SOURCE LINES 36-44

.. code-block:: default

    print(f"Solving a ({dim} x {dim}) dense linear system using MAPDL...")

    t1 = time.time()
    s = mm.factorize(a)
    x = s.solve(b, x)
    t2 = time.time()
    print(f"Elapsed time to solve the linear system using Mapdl: {t2 - t1} seconds")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Solving a (10000 x 10000) dense linear system using MAPDL...
    Elapsed time to solve the linear system using Mapdl: 4.568185567855835 seconds




.. GENERATED FROM PYTHON SOURCE LINES 45-46

Norm of the MAPDL Solution

.. GENERATED FROM PYTHON SOURCE LINES 46-49

.. code-block:: default

    mm.norm(x)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    1.0000000000000029



.. GENERATED FROM PYTHON SOURCE LINES 50-52

Solve the solution using numpy


.. GENERATED FROM PYTHON SOURCE LINES 52-59

.. code-block:: default

    print(f"Solving a ({dim} x {dim}) dense linear system using numpy...")

    t1 = time.time()
    x_py = np.linalg.solve(a_py, b_py)
    t2 = time.time()
    print(f"Elapsed time to solve the linear system using numpy: {t2 - t1} seconds")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Solving a (10000 x 10000) dense linear system using numpy...
    Elapsed time to solve the linear system using numpy: 5.483047723770142 seconds




.. GENERATED FROM PYTHON SOURCE LINES 60-62

Norm of the numpy Solution


.. GENERATED FROM PYTHON SOURCE LINES 62-63

.. code-block:: default

    np.linalg.norm(x_py)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    1.0000000000000022




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.363 seconds)


.. _sphx_glr_download_examples_01-apdlmath-examples_solve_dense_matrix.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: solve_dense_matrix.py <solve_dense_matrix.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: solve_dense_matrix.ipynb <solve_dense_matrix.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
